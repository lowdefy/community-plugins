_ref:
  path: templates/general.yaml.njk
  vars:
    pageId: community-plugin-mongodb
    pageTitle: MongoDB
    section: '@lowdefy/community-plugin-mongodb'
    content:
      - id: markdown
        type: MarkdownWithCode
        properties:
          content: |
            This plugin extends the [Lowdefy MongoDB connection](https://docs.lowdefy.com/MongoDB) with additional request types. Additionally all create, update and delete requests are modified to include change tracking functionality.
      - _ref:
          path: templates/plugin_usage.yaml
          vars:
            name: '@lowdefy/community-plugin-mongodb'
            packageJsonPath: ../../plugins/community-plugin-mongodb/package.json
      - id: markdown
        type: MarkdownWithCode
        properties:
          content: |
            ## Connections

            The `MongoDBCollection` connection adds change tracking functionality to the following request types:
              - MongoDBDeleteMany
              - MongoDBDeleteOne
              - MongoDBInsertMany
              - MongoDBInsertOne
              - MongoDBUpdateMany
              - MongoDBUpdateOne

            When the `logCollection.collection` property is defined. Each connection will write changes specifics to the change log collection to improve data change tracking.

            All other functionality, connection and request properties remains the same as defined in the [MongoDB Lowdefy connector](https://docs.lowdefy.com/MongoDB) documentation.

            #### Additional Connection Properties
            - `logCollection: object`: Optional log collection for logging changes.
              - `collection: string`: __Required__ - The name of the MongoDB log collection.
              - `meta: object`: Optional attributes object for user and other information.

            ## Requests

            Request types:
              - MongoDBUpdateOne
              - MongoDBInsertConsecutiveId
              - MongoDBInsertManyConsecutiveIds
              - MongoDBVersionedUpdateOne

            ### MongoDBUpdateOne

            #### Properties

            The `MongoDBUpdateOne` request modifies the standard [MongoDBUpdateOne](https://docs.lowdefy.com/MongoDB) to throw an error if no document was matched and updated. This behaviour can be disabled by setting the `disableNoMatchError` property.

            - `disableNoMatchError: boolean`: Set to true to disable the no match error when updating. It is set to false by default. _This is not the standard MongoDBUpdateOne behaviour and will throw an error when there is no matching document._

            The request returns the following:

            If a log collection is not set on the connection

            - `acknowledged: boolean` - Acknowledgement of the insertion.
            - `matchedCount: number` - The number of matched documents.
            - `modifiedCount: number` - The number of modified documents.
            - `upsertedId: string` - The ID of the upserted document.
            - `upsertedCount: number` - The number of upserts.

            If a log collection is set on the connection

            - `lastErrorObject: object` - An object containing data on whether an existing document was updated or not.
            - `ok: number` - Status of the request, 1 if the request was successful and 0 otherwise.
            - `'$clusterTime': object` - An object containing data on the cluster time and signature.
            - `operationTime: date` - Timestamp object of the operation time.

            #### Example

            ###### The disableNoMatchError property can be useful on a request that is in an action chain of other requests that should be executed whether or not it fails.
            ```yaml
              requests:
                - id: item_request_1
                  type: MongoDBUpdateOne
                  connectionId: items
                  payload:
                    id:
                      _state: item._id
                  properties:
                    disableNoMatchError: true
                    filter:
                      _id:
                        _payload: id
                      status: In Progress
                    update:
                      - $set:
                          ...
                - id: item_request_2
                  ...
              ...
              blocks:
                - id: update_items
                  type: Button
                  properties:
                    title: Update Item
                  events:
                    onClick:
                      - id: item_request_1
                        type: Request
                        params: item_request_1
                      - id: item_request_2
                        type: Request
                        params: item_request_2
                        messages:
                          success: Item updated
            ```

            ### MongoDBInsertConsecutiveId

            #### Properties

            The `MongoDBInsertConsecutiveId` request extends the standard [MongoDBInsert](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertOne/) allowing consecutive ID insertion given an incremental ID format.

            - `prefix: string`: **Required** - The prefix of the incremental ID format.
            - `length: number`: **Required** - The length of the incremental ID following the prefix.
            - `doc: object`: **Required** - The document to insert at the next consecutive ID.

            The request returns the following:

            - `acknowledged: boolean` - Acknowledgement of the insertion.
            - `insertedId: string` - The inserted ID.

            #### Example

            ###### Insert an item with the next ID.
            ```yaml
              id: insert_item
              type: MongoDBInsertConsecutiveId
              connectionId: items
              payload:
                doc:
                  _state: item
              properties:
                prefix: ABC-
                length: 4
                doc:
                  _object.assign:
                    - _payload: doc
                    - expired: false
            ```
            ###### Output
            If the last item in the collection was `ABC-0013` then
            ```json
            {
              "_id" : "ABC-0014",
              ...,
              "expired" : false
            }
            ```

            ### MongoDBInsertManyConsecutiveIds

            #### Properties

            The `MongoDBInsertManyConsecutiveIds` request extends the standard [MongoDBInsertMany](https://www.mongodb.com/docs/manual/reference/method/db.collection.insertMany/) allowing consecutive ID insertion given an incremental ID format.

            - `prefix: string`: **Required** - The prefix of the incremental ID format.
            - `length: number`: **Required** - The length of the incremental ID following the prefix.
            - `docs: object`: **Required** - The documents to insert at the next consecutive ID.

            The request returns the following:

            - `acknowledged: boolean` - Acknowledgement of the insertion.
            - `insertedIds: array` - The array of inserted IDs.

            #### Example

            ###### Insert items with the next IDs.
            ```yaml
              id: insert_items
              type: MongoDBInsertManyConsecutiveIds
              connectionId: items
              payload:
                docs:
                  _state: items
              properties:
                prefix: ABC-
                length: 4
                docs:
                  _payload: docs
            ```
            ###### Output
            If the last item in the collection was `ABC-0013` and we are inserting 3 items then
            ```json
            {
              "_id" : "ABC-0014",
              ...,
            },
            {
              "_id" : "ABC-0015",
              ...,
            },
            {
              "_id" : "ABC-0016",
              ...,
            }
            ```

            ### MongoDBVersionedUpdateOne

            #### Properties

            The `MongoDBVersionedUpdateOne` request uses the standard [MongoDBUpdateOne](https://docs.lowdefy.com/MongoDB) syntax to insert an identical document to the one found with only the updated field(s) changed.

            The `MongoDBVersionedUpdateOne` request consists of __three stages__:
            - `Find`: locates the document.
            - `Insert`: creates and inserts the document identical to the one found.
            - `Update`: applies the specified changes to the inserted document.

            The `options` property:
            - `find: object` - An object containing options for the `find` stage of the request.
            - `insert: object` - An object containing options for the `insert` stage of the request.
            - `update: object` - An object containing options for the `update` stage of the request.

            The request returns the following:

            If a log collection is not set on the connection

            - `acknowledged: boolean` - Acknowledgement of the insertion.
            - `matchedCount: number` - The number of matched documents.
            - `modifiedCount: number` - The number of modified documents.
            - `upsertedId: string` - The ID of the upserted document.
            - `upsertedCount: number` - The number of upserts.

            If a log collection is set on the connection

            - `lastErrorObject: object` - An object containing data on whether an existing document was updated or not.
            - `ok: number` - Status of the request, 1 if the request was successful and 0 otherwise.
            - `'$clusterTime': object` - An object containing data on the cluster time and signature.
            - `operationTime: date` - Timestamp object of the operation time.

            > To ensure that the most recent document is updated, a `sort` specification should be given in the find options.

            #### Example

            ###### Find the document with the highest item number and insert an identical document with a new name. A new document is inserted if none is found.
            ```yaml
              id: versioned_update
              type: MongoDBVersionedUpdateOne
              connectionId: items
              properties:
                filter:
                  entity_id: 123
                update:
                  $set:
                    name: New Name
                    updated_at:
                      _date: now
                options:
                  find:
                    sort:
                      updated_at: -1
                  update:
                    upsert: true
            ```

            ###### Before
            ```json
              [
                {"_id": ObjectId("..."), "entity_id": 123, "name": "Name", "value": 23,"updated_at": ISODate("2024-01-01") },
                {"_id": ObjectId("..."), "entity_id": 123, "name": "Name", "value": 33, "updated_at": ISODate("2024-03-01")},
              ]
            ```

            ###### After
            ```json
              [                
                {"_id": ObjectId("..."), "entity_id": 123, "name": "Name", "value": 23,"updated_at": ISODate("2024-01-01") },
                {"_id": ObjectId("..."), "entity_id": 123, "name": "Name", "value": 33, "updated_at": ISODate("2024-03-01")},
                {"_id": ObjectId("..."), "entity_id": 123, "name": "New Name", "value": 33, "updated_at": ISODate("2024-11-01")},
              ]
            ```
